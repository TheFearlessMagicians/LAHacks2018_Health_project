{
        // UPDATED AS OF 10.452AM Sat 31 Mar PST.
        challenges: [
                // This is a single challenge object. we plan to have multiple challenges.
                {
                        /* Blockchain values:
                            frequency
                            caloriesPerWorkout
                            endDate


                            methods:
                            logWorkout(calories): log a workout's calories.
                            getNumBets() : //how many ppl bet against.
                            getBet(idx): // returns [betAddress, money  in wei.]

                            getWorkouts() : return list of workouts, each item is number of cals burnt
                            pay(dest, amtOfmoneyInWei): // pay the dest in wei.
                            getBalance(address)


                        */
                        startDate: 'MOMENTOBJECTHERE', // UNIX TIME
                        endDate: 'MOMENTOBJECTHERE',
                        description: 'description here',
                        goal: 'goalstring here',
                        caloriesPerWorkout: 400 ,
                        frequency: 4, // how many times per week

                        workoutsCompleted: [200,400,300,500], // make progress bar for this, comparing total amount of workouts
                        // in challenge vs workouts completed.
                        userId: '1da20cblablabla',
                        exceedCalorieGoalBy: 0,



                        // NOT NEEDED IN POST TO MONGO
                        userBet: 400, // how much user is betting against himself.
                        challengeId:'1209adjsblablabla'
                }
        ],
        // storing all the bets.
        bets: [
                {
                        betterId: 'q190adoijw',
                        challengeId: '1209adjsblablabla',
                        money: 400, // float. in USD
                        isFor: false, // for or against.
                }
        ],
        // storing individual player info. the below will change depending on whether you pick
        // better, or user.
        player: {
                type: 'user' // OR better.
                name: 'blablabla',
                id:'bla bla bla',
                //The below is optional. We can either have it for challenges, or
                // for bets.
                challengesHistory:[
                        {
                            // challenge objects
                        }
                ]
                /*
                FOR BETS:

                bettingHistory: []
                */
        }
}
